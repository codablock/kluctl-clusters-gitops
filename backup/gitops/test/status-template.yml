apiVersion: v1
kind: ConfigMap
metadata:
  name: status-template
  namespace: kluctl-system
data:
  status.md: |
{% raw %}
    {% set target = get_var("inputs.kd.status.lastDeployResult.target", none) %}
    {% set conditionsByType = dict(get_var("inputs.kd.status.conditions", []) | groupby(attribute="type")) %}

    {% macro printErrors(l) %}
    | kind | namespace/name | message |
    |------|----------------|---------|
    {%- for e in l %}
    | {{ e.ref.kind }} | {{ e.ref.namespace or "<global>" }}/{{ e.ref.name }} | {{ e.error if e.error is defined else e.message }} |
    {%- endfor %}
    {% endmacro %}
    
    {% macro printResult(title, result, success_message, warning_message, error_message, cmd_name, show_changes) %}
    ### {% if (result.error is defined and result.error != "") or (result.errors is defined and result.errors > 0) %}:boom:{% elif result.warnings is defined and result.warnings > 0 %}:warning:{% else %}:white_check_mark:{% endif %} {{ title }}
    <details>
    <summary>Click to expand</summary>
    
    {% if (result.error is defined and result.error != "") or (result.errors is defined and result.errors > 0) %}
    {{ error_message.format(time=result.time) }}
    {% elif result.warnings is defined and result.warnings > 0 %}
    {{ warning_message.format(time=result.commandInfo.endTime) }}
    {% else %}
    {{ success_message.format(time=result.commandInfo.endTime) }}
    {% endif %}
    
    {% if result.error is defined and result.error != "" %}
    :boom: :boom: :boom: Command resulted in error: {{ result.error }}
    {% endif %}
    
    {% if show_changes %}
    #### Changes
    {% if result.get("newObjects") %}:floppy_disk: New K8s objects: {{ result.newObjects }}<br>{% endif %}
    {% if result.get("changedObjects") %}:construction_worker: Changed K8s objects: {{ result.changedObjects }}<br>{% endif %}
    {% if result.get("deletedObjects") %}:broken_heart: Deleted K8s objects: {{ result.deletedObjects }}<br>{% endif %}
    {% endif %}
    </details>
    
    {% if result.results is defined and result.results|length > 0 %}
    # :tada: Results
    | Key | Message |
    |--------|---------|
    {%- for e in result.results %}
    | {{ e.annotation.replace("validate-result.kluctl.io/", "") }} | {{ e.message }} |
    {%- endfor %}
    {% endif %}
    
    {% endmacro %}
    
    # :robot: Deployment Summary (env_name={{ get_var("inputs.kd.spec.args.env_name", "<unknown>") }} )
    
    {% set result=get_var("inputs.kd.status.lastDeployResult", none) %}
    {% if result %}
    {{ printResult("Deployment", result,
          "The deployment succeeded at {time}",
          "Warning(s) occurred at {time} while performing the deployment.",
          "Error(s) occurred at {time} while performing the deployment.",
          "deploy",
          True) }}
    {% endif %}
    
    {% set result=get_var("inputs.kd.status.lastValidateResult", none) %}
    {% if result %}
    {{ printResult("Validation", result,
          "The most recent validation succeeded",
          "Warning(s) occurred while validating the current deployment state.",
          "Error(s) occurred while validating the current deployment state.",
          "validate",
          False) }}
    {% endif %}
    
    {% if "Ready" in conditionsByType and conditionsByType["Ready"] %}
    {% if conditionsByType["Ready"][0].status == "True" %}
    # :robot: Target is ready! :thumbsup:
    {% else %}
    # :robot: Target is NOT ready! :thumbsdown:<br><br>
    Message from controller: {{ conditionsByType["Ready"][0].message }}
    {% endif %}
    {% endif %}
{% endraw %}
